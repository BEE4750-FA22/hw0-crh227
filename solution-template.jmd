---
title: "BEE 4750/5750 Homework 0"
author: "Caroline Herzog (crh227)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
function square_number(x) 
    output = x^2
    return output
end
```

## Problem 1.2
We can see that $5^2 =$ `j square_number(5)`


## Problem 1.3
```julia
# opening "Plots" package
Pkg.add("Plots")
using Plots

# evaluate square_number over [-10, 10]
x = -10:0.1:10
y = square_number.(x)

# generate plot
Plots.plot(x, y, label = "squares", title = "Squares of Numbers over [-10,10]", xlabel = "Values over [-10,10]", ylabel = "Squares of Numbers", legend = :bottomright)
```

# Problem 2

## Problem 2.1
``\sqrt{x}`` must be between ``a`` and ``x/a`` because *a* and *x/a* are a pair of factors that multiply
to equal *x*, and must necessarily be either greater or smaller than ``\sqrt{x}``. For example, we can think 
of *x* as being a rectangle with area *x* and side lengths of *a* and *x/a*. If ``a = x/a``, our rectangle is
actually a square, and ``\sqrt{x} = a = x/a``. However, if we begin to make *a* smaller, *x/a* must increase,
since the ``Area = x`` remains constant. 

## Problem 2.2
```julia
function guess_sqrt(x,a)
  # function returns estimate of sqrt(x) given initial guess a
  # given x > 0 - use this algorithm to find sqrt(x)
  to = 0.02    # set tolerance
  diff = 100      # set error

  # set up while loop
  while to <= diff

    # divide x/a, update a to avg.
      a = 0.5*(a + (x/a))

    # calculate new difference
      diff = a - x/a
  end
  return a
end
```

```julia
# testing above function for sqrt(2)
aGuess = guess_sqrt(2,0.3)
println("The approx. sqrt(2) is $aGuess")
```

# Problem 3

## Problem 3.1
```julia
# making a random vector, V, with length 20
V = rand(20)
```

## Problem 3.2
```julia
function mean(V)
sumV = 0

  # for loop to calculate mean
  b = length(V)

  for i in 1:b
    sumV = sumV + V[i]
  end

  MnEst = sumV / b
  return MnEst
end

function demean(V)

  # running above mean() fxn to obtain est. 
  MnEst = mean(V)

  # to avoid mutating old data
  vNew = V
  d = length(vNew)

  for i in 1:d
    vNew[i] = vNew[i] - MnEst
  end

return vNew
end
```

## Problem 3.3
```julia
# create vector, A, of 10 elements
A = [0 0 1 1 1 1 1 1 0 0]
```

## Problem 3.4
```julia
# create rand 5x5 matrix, B
B = rand(5,5)
C = zeros(5,5)

# find and subtract mean from each column
for h in 1:5
  colB = B[:,h]

  C[:,h] = demean(colB)
end
display(C)
```

# Problem 4

## Problem 4.1
```julia
# load Distributions.jl
import Pkg
Pkg.add("Distributions")
using Distributions

# create log normal distribution given data
mu = log(0.03)  # log mean
sig = 0.005     # stand. dev.
myLogNorm = LogNormal(mu, sig)

# draw 100 samples using rand() function
ytVal = rand(myLogNorm, 100)
```

## Problem 4.2
```julia
function PhosLake(a, b, q, T, x0)
# function takes in constant parameters a, b, q, period T [years], 
# and intial concentration of phophorus x0
PhosC = zeros(T+1)
PhosC[1] = x0   # initial P at T = 0

for i = 1:T
    # setting up parameters
    y = ytVal[i]
    xOld = PhosC[i]
    
    # updating new Xt+1 value
    PhosC[i+1] = xOld + a + y + (xOld^q)/(1+xOld^q) - b*xOld   
end
return PhosC
end
```

## Problem 4.3
```julia
# setting up parameters and running function above
T = 100
phosData = PhosLake(0.4, 0.42, 2, T, 0.5)
phosTime = 0:1:T

# plot
import Pkg
Pkg.add("Plots")
using Plots

Plots.plot(phosTime, phosData, label = "Amount of Phosphorus", title = "Phosphorus Concentration vs. Time", xlabel = "Time", ylabel = "Phosphorus [ ]", legend = :bottom)
```

# References
1. https://www.overleaf.com/learn/latex/Mathematical_expressions
2. https://docs.juliahub.com/CalculusWithJulia/AZHbv/0.0.5/precalc/vectors.html